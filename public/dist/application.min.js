"use strict";var ApplicationConfiguration=function(){var applicationModuleName="notes",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angularMoment","angular.filter","daterangepicker"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("noteapp"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","$location",function($scope,Authentication,$location){$scope.authentication=Authentication,""!==$scope.authentication.user&&$location.path("/note")}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("noteapp").config(["$stateProvider",function($stateProvider){$stateProvider.state("noteapp",{url:"/note",templateUrl:"modules/noteapp/views/noteapp.client.view.html"}).state("noteappabout",{url:"/about",templateUrl:"modules/noteapp/views/about.client.view.html"})}]),angular.module("noteapp").controller("NoteappController",["$scope","$stateParams","$location","Authentication","Notes","Notecolumn","Notevalue","$anchorScroll","$timeout",function($scope,$stateParams,$location,Authentication,Notes,Notecolumn,Notevalue,$anchorScroll,$timeout){$scope.authentication=Authentication,$scope.time="H:mm:ss",$scope.c10cln=!1,$scope.c2cln=!0,$scope.allowaddnote=!1,$scope.hideifsubmiting=!1,$scope.date={startDate:new Date,endDate:new Date},$scope.date.startDate.setHours(0,0,0,0),$scope.date.endDate.setHours(23,59,59,59),$scope.create=function(){if($scope.notes.length<20){var note=new Notes({notename:"New note"});note.$save(function(response){$scope.notes.unshift(response),$scope.notechoice(response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),$scope.allowaddnote=!1}else $scope.allowaddnote=!0},$scope.deletenote=function(note_id){if("undefined"!=typeof note_id&&confirm("Are you sure want to delete this note?")===!0){var note=new Notes({_id:note_id});note.$delete(function(response){$location.path("/")},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.changeclname=function(column_id){var value="";for(var i in $scope.ncl)if($scope.ncl[i]._id===column_id){value=$scope.ncl[i];break}var person=prompt("Please enter column name",value.columnname);if(null!==person){var notecledit=new Notecolumn({_id:$scope.note_id_choice,columnid:column_id,columnname:person});notecledit.$update(function(){value.columnname=person},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.notechoice=function(note_id){if($scope.note_id_choice===note_id){var value="";for(var i in $scope.notes)if($scope.notes[i]._id===note_id){value=$scope.notes[i];break}var person=prompt("Please enter note name",value.notename);if(null!==person){var noteedit=new Notes({_id:note_id,notename:person});noteedit.$update(function(){value.notename=person},function(errorResponse){$scope.error=errorResponse.data.message})}}else $scope.note_id_choice=note_id,$scope.loadnote(note_id)},$scope.find=function(){$scope.notes=Notes.query(function(response){"undefined"!=typeof response[0]&&$scope.notechoice(response[0]._id)})},$scope.loadnote=function(note_id){$scope.newnotecl=[],$scope.timecolid=0,$scope.ncl=Notecolumn.query({noteId:note_id},function(response){$scope.timecolid=response[0]._id;for(var item in response)response[item].position&&($scope.newnotecl[response[item].position]={},$scope.newnotecl[response[item].position]._id=response[item]._id,$scope.newnotecl[response[item].position]._value="");response.length>10?$scope.c10cln=!0:$scope.c10cln=!1,response.length>2?$scope.c2cln=!1:$scope.c2cln=!0,$scope.newnotecl.shift(),$scope.loadnotevalue()})},$scope.loadnotevalue=function(){var colid=[];for(var i in $scope.newnotecl)colid[i]=$scope.newnotecl[i]._id;colid.unshift($scope.timecolid);var data={colid:colid,daterange:$scope.date},loadnvl=Notevalue.loadnotevalue(data);loadnvl.success(function(res){$scope.noteclvl=res})},$scope.addcolm=function(){var position=$scope.ncl.length,notecl=new Notecolumn({columnname:"New column",position:position,note:$scope.note_id_choice});notecl.$save(function(response){$scope.loadnote($scope.note_id_choice)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removecolm=function(){if(confirm("Are you sure want to remove column?")===!0){var notecl=new Notecolumn({_id:$scope.note_id_choice});notecl.$delete(function(response){$scope.loadnote($scope.note_id_choice)},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.addcolmval=function(){$scope.hideifsubmiting=!0;var continuet=!1;if($scope.newnotecl.length>1)for(var i in $scope.newnotecl)""!==$scope.newnotecl[i]._value.trim()&&(continuet=!0);else""!==$scope.newnotecl[0]._value.trim()&&(continuet=!0);var data={};if(data.time=new Date,"undefined"!=typeof $scope.lastinserttime&&$scope.lastinserttime.getTime()===data.time.getTime()&&(continuet=!1,alert("You enter too fast!!!")),continuet===!0){$scope.lastinserttime=data.time,data.data=angular.copy($scope.newnotecl);var timedt={_id:$scope.timecolid,_value:data.time};data.data.unshift(timedt);var sto=Notevalue.addvalue(data);sto.success(function(res){var newvl={},flag=!1;for(var i in data.data)if("undefined"!=typeof data.data[i].notevalueid&&""!==data.data[i].notevalueid.trim()){for(var j in $scope.noteclvl)$scope.noteclvl[j]._id===data.data[i].notevalueid&&($scope.noteclvl[j].columnvalue=data.data[i]._value);flag=!0}if(flag===!1)for(var x in data.data)newvl={columnvalue:data.data[x]._value,created:data.time,notecolumn:{_id:data.data[x]._id,position:x}},$scope.noteclvl.push(newvl);for(var jj in $scope.newnotecl)$scope.newnotecl[jj]._value="",$scope.newnotecl[jj].notevalueid="";$timeout(function(){$scope.hideifsubmiting=!1},1e3)}),continuet=!1}},$scope.editrow=function(timeinsert){for(var i in $scope.noteclvl)if($scope.noteclvl[i].created===timeinsert)for(var j in $scope.newnotecl)$scope.newnotecl[j]._id===$scope.noteclvl[i].notecolumn._id&&($scope.newnotecl[j]._value=$scope.noteclvl[i].columnvalue,$scope.newnotecl[j].notevalueid=$scope.noteclvl[i]._id);$location.hash("bottom"),$anchorScroll()},$scope.deleterow=function(timeinsert){if(confirm("Are you sure want to delete this row?")===!0){var dl=Notevalue.deleterow(timeinsert);dl.success(function(){$scope.noteclvl=$scope.noteclvl.filter(function(value){return value.created!==timeinsert})})}}}]),angular.module("noteapp").directive("currentTime",["$interval","dateFilter",function($interval,dateFilter){return function(scope,element,attrs){function updateTime(){element.text(dateFilter(new Date,format))}var format,stopTime;scope.$watch(attrs.currentTime,function(value){format=value,updateTime()}),stopTime=$interval(updateTime,1e3),element.on("$destroy",function(){$interval.cancel(stopTime)})}}]),angular.module("noteapp").directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter)}),event.preventDefault())})}}),angular.module("noteapp").filter("clfilter",[function(){return function(input){if(moment(input).isValid()===!0)input=moment(input).format("H:mm:ss MM-DD-YY");else{var replacedText,replacePattern1,replacePattern2,replacePattern3;replacePattern1=/(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim,replacedText=input.replace(replacePattern1,'<a href="$1" target="_blank">$1</a>'),replacePattern2=/(^|[^\/])(www\.[\S]+(\b|$))/gim,replacedText=replacedText.replace(replacePattern2,'$1<a href="http://$2" target="_blank">$2</a>'),replacePattern3=/(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim,input=replacedText.replace(replacePattern3,'<a href="mailto:$1">$1</a>')}return input}}]),angular.module("noteapp").factory("Notecolumn",["$resource",function($resource){return $resource("notecolumn/:noteId",{noteId:"@_id"},{update:{method:"PUT"},addvalue:{method:"POST"}})}]),angular.module("noteapp").factory("Notes",["$resource",function($resource){return $resource("note/:noteId",{noteId:"@_id"},{update:{method:"PUT"}})}]),angular.module("noteapp").factory("Notevalue",["$http",function($http){return{addvalue:function(data){return $http.post("/notevalue/add",data)},loadnotevalue:function(data){return $http.post("/notevalue",data)},deleterow:function(data){return $http["delete"]("/notevalue/"+data)}}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);